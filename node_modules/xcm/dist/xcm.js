"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var shlex = require("shlex");
var table = require("text-table");
var XcmNode = (function () {
    function XcmNode(phrase, parent) {
        this.description = [];
        this.options = {};
        this.childNodes = [];
        this.phrase = phrase;
        this.parent = parent || this;
    }
    XcmNode.prototype.describe = function () {
        var description = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            description[_i] = arguments[_i];
        }
        this.description = description;
        return this;
    };
    XcmNode.prototype.option = function (key, options) {
        if (options === void 0) { options = {}; }
        var keys = Array.isArray(key) ? key : [key];
        var additionalOptions = keys.reduce(function (prev, key) {
            var _a;
            return (__assign({}, prev, (_a = {}, _a[key] = {
                isRequired: options.isRequired || false,
                description: options.description || "",
                "default": key.length === 1 ? !!options["default"] : options["default"].toString(),
                type: keys[0]
            }, _a)));
        }, {});
        this.options = __assign({}, this.options, additionalOptions);
        return this;
    };
    XcmNode.prototype.action = function (action) {
        this.executor = action;
        return this;
    };
    XcmNode.prototype.help = function () {
        this.executor = xcmHelpWriter;
        return this;
    };
    XcmNode.prototype.sub = function (phrase) {
        var node = new XcmNode(phrase, this);
        this.childNodes.push(node);
        return node;
    };
    XcmNode.prototype["super"] = function () {
        return this.parent;
    };
    XcmNode.prototype.findChildNode = function (phrase) {
        for (var _i = 0, _a = this.childNodes; _i < _a.length; _i++) {
            var node = _a[_i];
            if (node.phrase === phrase) {
                return node;
            }
        }
        return false;
    };
    XcmNode.prototype.getHelps = function () {
        return {
            phrase: this.phrase,
            description: this.description,
            options: this.options,
            sub: this.childNodes.map(function (node) { return node.getHelps(); })
        };
    };
    XcmNode.prototype.exec = function () {
        var phrases = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            phrases[_i] = arguments[_i];
        }
        var descendants = [];
        var options = {};
        var history = [this.phrase];
        var currentNode = this;
        for (var _a = 0, phrases_1 = phrases; _a < phrases_1.length; _a++) {
            var phrase = phrases_1[_a];
            var _b = XcmNode.isOption(phrase), yesNoMatch = _b.yesNoMatch, keyValueMatch = _b.keyValueMatch;
            if (yesNoMatch) {
                options[yesNoMatch[1]] = true;
            }
            else if (keyValueMatch) {
                options[keyValueMatch[1]] = shlex.split(keyValueMatch[2])[0];
            }
            else {
                var nextNode = currentNode.findChildNode(phrase);
                if (nextNode) {
                    history.push(phrase);
                    currentNode = nextNode;
                }
                else {
                    descendants.push(phrase);
                }
            }
        }
        var defaultOptions = Object.keys(currentNode.options).reduce(function (prev, key) {
            var _a;
            return __assign({}, prev, (_a = {}, _a[key] = currentNode.options[key]["default"], _a));
        }, {});
        for (var _c = 0, _d = Object.keys(currentNode.options); _c < _d.length; _c++) {
            var key = _d[_c];
            var isRequired = currentNode.options[key].isRequired;
            if (isRequired && options[key] === void 0) {
                process.stderr.write(key + " is required, but not given.");
                return false;
            }
        }
        typeof currentNode.executor === "function" &&
            currentNode.executor(descendants, __assign({}, defaultOptions, options), currentNode["super"]().getHelps(), history);
        return true;
    };
    XcmNode.prototype.execAsync = function () {
        var phrases = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            phrases[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.exec.apply(this, phrases)];
            });
        });
    };
    XcmNode.prototype.parse = function () {
        var _a = process.argv, args = _a.slice(2);
        return this.exec.apply(this, args);
    };
    XcmNode.prototype.parseAsync = function () {
        var _a = process.argv, args = _a.slice(2);
        return this.execAsync.apply(this, args);
    };
    XcmNode.isOption = function (phrase) {
        var yesNoMatch = phrase.match(/^-([a-z,A-Z,0-9])+$/);
        var keyValueMatch = phrase.match(/^--([a-z,A-Z][a-z,A-Z,0-9]+)=(.+)$/);
        return { yesNoMatch: yesNoMatch, keyValueMatch: keyValueMatch };
    };
    return XcmNode;
}());
exports["default"] = XcmNode;
var xcmHelpWriter = function (_0, _1, help, history) {
    var description = help.description, options = help.options, sub = help.sub;
    var ancestors = history.splice(0, history.length - 1);
    var optionLines = Object.keys(options).length > 0
        ? "Options:\n" + table(Object.keys(options).map(function (key) {
            var displayOption = key.length > 1 ? "--" + key : "-" + key;
            var defaultValue = options[key]["default"]
                ? "[" + options[key]["default"] + "]"
                : "";
            return ["    ", displayOption, defaultValue, options[key].description];
        }))
        : "";
    var commandLines = sub.length > 0
        ? "Commands:\n" + table(sub.map(function (_a) {
            var phrase = _a.phrase, description = _a.description;
            return ["    ", phrase].concat(description);
        }))
        : "";
    process.stdout.write("\n" +
        [
            [
                "Usage:"
            ].concat(ancestors, [
                commandLines ? "[command / ...arguments]" : false,
                optionLines ? "[options]" : false
            ]).filter(function (x) { return !!x; })
                .join(" "),
            description.join(" "),
            optionLines,
            commandLines
        ]
            .filter(function (x) { return !!x; })
            .join("\n\n") +
        "\n");
};
//# sourceMappingURL=xcm.js.map